"""
This script is responsible for training models and saving the best model to HDFS. The general flow is as follows:

transformed_listencounts_df is loaded from HDFS and is split into training_data, validation_data and test_data. The dataframe is converted
to an RDD and each row is converted to a Rating(row['spark_user_id'], row['recording_id'], row['transformed_listencount']) object.

Eight models are trained using the training_data RDD. Each model uses a different value of `rank`, `lambda` and `iteration`.
Refer to https://spark.apache.org/docs/2.2.0/ml-collaborative-filtering.html to know more about these params.
The Model with the least validation_rmse is called the best_model.
validation_rmse is Root Mean Squared Error calculated using the validation_data.

The best_model generated by the previous run of the script is deleted from HDFS and the new best_model is saved to HDFS.

Since the model is always trained on recently created dataframes, the model_metadata (rank, lambda, training_data_count etc) is
saved corresponding to recently created dataframe_id. The model metadata also contains the unique identification string for the best model.
"""
import itertools
import logging
import time
import uuid
from collections import namedtuple
from datetime import datetime, timezone
from typing import List, Tuple

from pyspark import Row
from pyspark.ml.evaluation import RegressionEvaluator
from pyspark.ml.recommendation import ALS

import listenbrainz_spark
from listenbrainz_spark import config, utils, path, schema
from listenbrainz_spark.exceptions import PathNotFoundException
from listenbrainz_spark.recommendations.recording.create_dataframes import describe_listencount_transformer
from listenbrainz_spark.recommendations.utils import save_html
from listenbrainz_spark.stats import run_query

logger = logging.getLogger(__name__)

Model = namedtuple('Model', 'model validation_rmse rank lmbda iteration alpha model_id training_time rmse_time')


def get_model_path(model_id: str):
    """ Get path to save or load model

        Args:
            model_id: Model identification string.

        Returns:
            path to save or load model.
    """
    return config.HDFS_CLUSTER_URI + path.RECOMMENDATION_RECORDING_DATA_DIR + '/' + model_id


def get_latest_dataframe_id():
    """ Get dataframe id of dataframe on which model has been trained. """
    dataframe_metadata_df = utils.read_files_from_HDFS(path.RECOMMENDATION_RECORDING_DATAFRAME_METADATA)
    dataframe_metadata_df.createOrReplaceTempView("dataframe_metadata")
    return run_query("""
        SELECT dataframe_id
          FROM dataframe_metadata
      ORDER BY dataframe_created DESC
         LIMIT 1
    """).collect()[0].dataframe_id


def preprocess_data(transformed_listencounts_df, context):
    """ Split the listen data into training set for training the model and test set for evaluating the model """
    t0 = time.monotonic()
    logger.info('Splitting dataframe...')

    logger.info('Splitting dataframe...')
    # divide in ratio of 4:1:1, so 4/6th = 67% of data is used for training, 16.5% for validation and 16.7% for testing
    # 45 can be any seed for random sampling. # TODO: figure out why 45 was used in the first place.
    training_data, validation_data, test_data = transformed_listencounts_df.randomSplit([4.0, 1.0, 1.0], 45)

    context["train_ratio"] = "4 : 1 : 1"
    context["time_preprocessing"] = f"{(time.monotonic() - t0) / 60:.2f} mins"
    context["count_training_data"] = training_data.count()
    context["count_validation_data"] = validation_data.count()
    context["count_test_data"] = test_data.count()

    return training_data, validation_data, test_data


def train_models(training_data, validation_data, evaluator, ranks, lambdas, iterations, alphas, context) -> Tuple[
    Model, List[Model]]:
    """ Train models and get the best model.
        Args:
            training_data (rdd): Used for training.
            validation_data (rdd): Used for validation.
            evaluator: the metric evaluator to calculate accuracy of the model.
            ranks (list): Number of factors in ALS model.
            lambdas (list): Controls regularization.
            iterations (list): Number of iterations to run.
            alphas (list): Baseline level of confidence weighting applied.
            context: to store metadata for display in html reports.
        Returns:
            best_model: Model with least RMSE value.
            model_metadata (dict): Models information such as model id, error etc.
    """
    tS = time.monotonic()
    logger.info("Training model.")

    best_model = None
    all_models = []

    for rank, lmbda, iteration, alpha in itertools.product(ranks, lambdas, iterations, alphas):
        model_id = f"{config.MODEL_ID_PREFIX}-{uuid.uuid4()}"

        t0 = time.monotonic()
        logger.info("Training model with model id: {}".format(model_id))
        logger.info("Params: Rank - %d, Lambda - %d, Iterations - %d, Alpha - %f", rank, lmbda, iteration, alpha)
        als = ALS(userCol='spark_user_id', itemCol='recording_id', ratingCol='transformed_listencount',
                  rank=rank, maxIter=iteration, regParam=lmbda, alpha=alpha, implicitPrefs=True,
                  coldStartStrategy="drop")
        model = als.fit(training_data)
        logger.info("Model trained!")
        mt = '{:.2f}'.format((time.monotonic() - t0) / 60)

        t0 = time.monotonic()
        logger.info("Calculating validation RMSE for model with model id : {}".format(model_id))
        predictions = model.transform(validation_data)
        validation_rmse = evaluator.evaluate(predictions)
        logger.info("Validation RMSE calculated!")
        vt = '{:.2f}'.format((time.monotonic() - t0) / 60)

        curr_model = Model(
            model=model,
            validation_rmse=round(validation_rmse, 2),
            rank=rank,
            lmbda=lmbda,
            iteration=iteration,
            alpha=alpha,
            model_id=model_id,
            training_time=mt,
            rmse_time=vt,
        )

        all_models.append(curr_model)

        if best_model is None or validation_rmse < best_model.validation_rmse:
            best_model = curr_model

    logger.info("Model trained!")

    context["time_model_training"] = f"{(time.monotonic() - tS) / 3600:.2f} hours"

    context["best_model"] = best_model
    context["all_models"] = all_models

    return best_model, all_models


def delete_model():
    """ Delete model.
        Note: At any point in time, only one model is in HDFS
    """
    dir_exists = utils.path_exists(path.RECOMMENDATION_RECORDING_DATA_DIR)
    if dir_exists:
        utils.delete_dir(path.RECOMMENDATION_RECORDING_DATA_DIR, recursive=True)


def save_model_metadata_to_hdfs(model: Model, context: dict):
    """ Add model metadata to the model metadata dataframe.

        Args:
            model: the model to save for future use.
            context: to store metadata for display in html reports.
    """
    logger.info("Saving model metadata...")
    dataframe_id = get_latest_dataframe_id()

    metadata_row = Row(
        dataframe_id=dataframe_id,
        model_created=datetime.now(timezone.utc),
        model_html_file=context["model_html_file"],
        model_id=model.model_id,
        model_param=Row(
            alpha=model.alpha,
            iteration=model.iteration,
            lmbda=model.lmbda,
            rank=model.rank,
        ),
        test_rmse=context["test_rmse"],
        validation_rmse=model.validation_rmse
    )
    model_metadata_df = utils.create_dataframe(metadata_row, schema.model_metadata_schema)

    utils.append(model_metadata_df, path.RECOMMENDATION_RECORDING_MODEL_METADATA)
    logger.info('Model metadata saved...')


def save_model(model: Model, context: dict):
    """ Save model to HDFS and add its metadata to the model metadata dataframe.

        Args:
            model: the model to save for future use.
            context: to store metadata for display in html reports.
    """
    t0 = time.monotonic()
    # delete previously saved model before saving a new model
    delete_model()

    logger.info('Saving model...')
    dest_path = get_model_path(model.model_id)
    model.model.save(dest_path)
    logger.info('Model saved!')

    save_model_metadata_to_hdfs(model, context)
    context["time_model_save"] = f"{(time.monotonic() - t0) / 60:.2f} mins"


def save_training_html(context):
    """ Prepare and save HTML report of the model training process. """
    context["listencount_transformer_description"] = describe_listencount_transformer()
    context["time_total"] = f"{(time.monotonic() - context['time_start']) / 3600:.2f} hours"
    save_html(context["model_html_file"], context, 'model.html')
    logger.info('Done!')


def main(ranks=None, lambdas=None, iterations=None, alphas=None):
    if ranks is None:
        logger.critical('model param "ranks" missing')

    if lambdas is None:
        logger.critical('model param "lambdas" missing')
        raise

    if iterations is None:
        logger.critical('model param "iterations" missing')
        raise

    if alphas is None:
        logger.critical('model param "alphas" missing')
        raise

    context = {"time_start": time.monotonic()}

    listenbrainz_spark.init_spark_session("Train Models")

    # Add checkpoint dir to break and save RDD lineage.
    listenbrainz_spark.context.setCheckpointDir(config.HDFS_CLUSTER_URI + path.CHECKPOINT_DIR)

    try:
        transformed_listencounts_df = utils.read_files_from_HDFS(
            path.RECOMMENDATION_RECORDING_TRANSFORMED_LISTENCOUNTS_DATAFRAME)
    except PathNotFoundException as err:
        logger.error('{}\nConsider running create_dataframes.py'.format(str(err)), exc_info=True)
        raise

    context["time_load_playcounts"] = f"{(time.monotonic() - context['time_start']) / 60:.2f} mins"

    evaluator = RegressionEvaluator(metricName="rmse", labelCol="transformed_listencount", predictionCol="prediction")
    training_data, test_data = preprocess_data(transformed_listencounts_df, context)

    best_model, all_models = train_models(training_data, evaluator, ranks, lambdas, iterations, alphas, context)
    logger.info("Best model params: %s", best_model)

    logger.info("Calculating test RMSE for best model:")
    test_predictions = best_model.model.transform(test_data)
    context["test_rmse"] = evaluator.evaluate(test_predictions)
    logger.info("Test RMSE calculated!")

    context["model_html_file"] = f"Model-{datetime.utcnow().strftime('%Y-%m-%d-%H:%M')}-{uuid.uuid4()}.html"

    save_model(best_model, context)
    save_training_html(context)

    # Delete checkpoint dir as saved lineages would eat up space, we won't be using them anyway.
    utils.delete_dir(path.CHECKPOINT_DIR, recursive=True)

    return [{
        'type': 'cf_recommendations_recording_model',
        'model_upload_time': str(datetime.now(timezone.utc)),
        'total_time': f"{time.monotonic() - context['time_start']:.2f} seconds",
    }]
