import os

DEBUG = True # set to False in production mode

SECRET_KEY = "CHANGE_ME"


# DATABASES

# Primary databases
SQLALCHEMY_DATABASE_URI = "postgresql://listenbrainz:listenbrainz@db:5432/listenbrainz"
MESSYBRAINZ_SQLALCHEMY_DATABASE_URI = "postgresql://messybrainz:messybrainz@db:5432/messybrainz"

POSTGRES_ADMIN_URI="postgresql://postgres:postgres@db/postgres"
POSTGRES_ADMIN_LB_URI = "postgresql://postgres:postgres@db/listenbrainz"
MB_DATABASE_URI = ""

SQLALCHEMY_TIMESCALE_URI = "postgresql://listenbrainz_ts:listenbrainz_ts@timescale/listenbrainz_ts"
TIMESCALE_ADMIN_URI = "postgresql://postgres:postgres@timescale/postgres"
TIMESCALE_ADMIN_LB_URI = "postgresql://postgres:postgres@timescale/listenbrainz_ts"


# Redis
REDIS_HOST = "redis"
REDIS_PORT = 6379
REDIS_NAMESPACE = "listenbrainz"

# RabbitMQ
RABBITMQ_HOST = "rabbitmq"
RABBITMQ_PORT = 5672
RABBITMQ_USERNAME = "guest"
RABBITMQ_PASSWORD = "guest"
RABBITMQ_VHOST = "/"
MAXIMUM_RABBITMQ_CONNECTIONS = 20

# RabbitMQ exchanges and queues
INCOMING_EXCHANGE = "incoming"
INCOMING_QUEUE = "incoming"
UNIQUE_EXCHANGE = "unique"
UNIQUE_QUEUE = "unique"
FOLLOW_LIST_QUEUE = "follow_list"
PLAYING_NOW_EXCHANGE = "playing_now"
PLAYING_NOW_QUEUE = "playing_now"

SPARK_RESULT_EXCHANGE = "spark_result"
SPARK_RESULT_QUEUE = "spark_result"
SPARK_REQUEST_EXCHANGE = "spark_request"
SPARK_REQUEST_QUEUE = "spark_request"

# MusicBrainz OAuth
MUSICBRAINZ_CLIENT_ID = "CLIENT_ID"
MUSICBRAINZ_CLIENT_SECRET = "CLIENT_SECRET"

# Lastfm API
LASTFM_API_URL = "https://ws.audioscrobbler.com/2.0/"
LASTFM_API_KEY = "USE_LASTFM_API_KEY"

# Stats
STATS_ENTITY_LIMIT = 100 # the number of entities to calculate at max with BQ
STATS_CALCULATION_LOGIN_TIME = 30 # users must have logged in to LB in the past 30 days for stats to be calculated
STATS_CALCULATION_INTERVAL = 7 # stats are calculated every 7 days


# Max time in seconds after which the playing_now stream will expire.
PLAYING_NOW_MAX_DURATION = 10 * 60

# LOGGING

# Uncomment any of the following logging stubs if you want to enable logging
# during development. In general you shouldn't need to do this

# LOG_FILE = {
#    'filename': './logs/listenbrainz.txt',
#    'max_bytes': 512 * 1024, # optional
#    'backup_count': 100, # optional
# }

# LOG_EMAIL = {
#    'mail_server': 'localhost',
#    'mail_port': 25,
#    'mail_from_host': 'listenbrainz.org',
#    'log_email_recipients': [],
#    'log_email_topic': 'ListenBrainz Error',
#    'level': 'ERROR',
# }

# LOG_SENTRY = {
#    'dsn':'',
#    'environment': 'development',
#    'level': 'ERROR',
# }


# MISCELLANEOUS

# Set to True if Less should be compiled in browser. Set to False if styling is pre-compiled.
COMPILE_LESS = True

# MAX file size to be allowed for the lastfm-backup import, default is infinite
# Size is in bytes
MAX_CONTENT_LENGTH = 16 * 1024 * 1024  # 16MB

# Specify the upload folder where all the lastfm-backup will be stored
# The path must be absolute path
UPLOAD_FOLDER = "/tmp/lastfm-backup-upload"

# Set to "https://api.listenbrainz.org" if you want to work on frontend for user statistics
# without going through the process of generating the stats in local environment. Otherwise,
# set it to "http://localhost"
API_URL = 'https://api.listenbrainz.org'
LASTFM_PROXY_URL = 'http://localhost:8080/'
SERVER_ROOT_URL = 'http://localhost'
WEBSOCKETS_SERVER_URL = 'http://localhost:8081'
MUSICBRAINZ_OAUTH_URL = 'https://musicbrainz.org/oauth2/userinfo'
LISTENBRAINZ_LABS_API_URL = 'https://labs.api.listenbrainz.org'

# Flask Debug redirect
# Set to True if you want Flask-Debug to intercept redirects
DEBUG_TB_INTERCEPT_REDIRECTS = False

# Users who are allowed to view the LB admin interface
ADMINS = []
# Users who are allowed to submit playlists made for someone else.
APPROVED_PLAYLIST_BOTS = ['troi-bot']

# SPOTIFY
SPOTIFY_CLIENT_ID = 'needs a non empty default value for tests, change this'
SPOTIFY_CLIENT_SECRET = 'needs a non empty default value for tests, change this'
SPOTIFY_CALLBACK_URL = 'http://localhost/profile/connect-spotify/callback'

# This is set to False to stop a warning from flask_sqlalchemy.
# We do not use this feature at all, so it is safe to set to False.
# See https://stackoverflow.com/a/33790196 for more details.
SQLALCHEMY_TRACK_MODIFICATIONS = False

TESTING = True # this flag is used by the mail module to check if mails need to be sent or not

# Mail server
SMTP_SERVER = 'listenbrainz-mail'
SMTP_PORT = 25
MAIL_FROM_DOMAIN = 'listenbrainz.org'

# expiration of 'Remember me' cookie
SESSION_REMEMBER_ME_DURATION = 365

# listen dumps creation dir
LISTEN_DUMP_TEMP_DIR_ROOT = os.path.join(os.path.dirname(os.path.realpath(__file__)), '..', 'tmp')

# Feature configs that enable/disable new features that are merged in master, but not ready for release
FEATURE_PLAYLIST=True
