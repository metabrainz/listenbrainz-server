{
  "echo.echo": {
    "name": "echo.echo",
    "description": "Echos the message passed to it as the response",
    "params": ["message"]
  },
  "stats.user.entity": {
    "name": "stats.user.entity",
    "description": "Entity statistics for all users for the requested stats_range",
    "params": ["entity", "stats_range", "database"]
  },
  "stats.entity.listeners": {
    "name": "stats.entity.listeners",
    "description": "Listener statistics for all entities of given type for the requested stats_range",
    "params": ["entity", "stats_range", "database"]
  },
  "stats.user.listening_activity": {
    "name": "stats.user.listening_activity",
    "description": "Calculates number of listens in periods depending on the stats_range value. see the documentation in spark code for details.",
    "params": ["stats_range", "database"]
  },
  "stats.user.daily_activity": {
    "name": "stats.user.daily_activity",
    "description": "Calculate number of listens for an user per hour on each day of the requested stats_range.",
    "params": ["stats_range", "database"]
  },
  "stats.sitewide.entity": {
    "name": "stats.sitewide.entity",
    "description": "Calculate top entites listened to on the website in the requested stats_range",
    "params": ["entity", "stats_range"]
  },
  "stats.sitewide.listening_activity": {
    "name": "stats.sitewide.listening_activity",
    "description": "Calculates number of listens in periods depending on the stats_range value. see the documentation in spark code for details.",
    "params": ["stats_range"]
  },
  "year_in_music.new_releases_of_top_artists": {
    "name": "year_in_music.new_releases_of_top_artists",
    "description": "Calculate list of releases released this year by top 50 artists of this year for each user",
    "params": ["year"]
  },
  "year_in_music.tracks_of_the_year": {
    "name": "year_in_music.tracks_of_the_year",
    "description": "Calculate all tracks a user has listened to in the given year",
    "params": ["year"]
  },
  "year_in_music.day_of_week": {
    "name": "year_in_music.day_of_week",
    "description": "Calculate the day of week with most listens for the user",
    "params": ["year"]
  },
  "year_in_music.most_listened_year": {
    "name": "year_in_music.most_listened_year",
    "description": "Calculate the year for in which highest number of albums listened by the user were released",
    "params": ["year"]
  },
  "import.dump.full_newest": {
    "name": "import.dump.full_newest",
    "description": "Import the newest available full dump into the spark cluster",
    "params": ["local"]
  },
  "import.dump.full_id": {
    "name": "import.dump.full_id",
    "description": "Import full dump with the specified ID into the spark cluster",
    "params": ["dump_id", "local"]
  },
  "import.dump.incremental_newest": {
    "name": "import.dump.incremental_newest",
    "description": "Import the newest available incremental dump into the spark cluster",
    "params": ["local"]
  },
  "import.dump.incremental_id": {
    "name": "import.dump.incremental_id",
    "description": "Import incremental dump with the specified ID into the spark cluster",
    "params": ["dump_id", "local"]
  },
  "import.dump.mlhd": {
    "name": "import.dump.mlhd",
    "description": "Import MLHD+ dump into the spark cluster",
    "params": []
  },
  "import.pg_metadata_tables": {
    "name": "import.pg_metadata_tables",
    "description": "Send the cluster a request to import metadata table from MB db postgres",
    "params": []
  },
  "cf.missing_mb_data": {
    "name": "cf.missing_mb_data",
    "description": "Generate missing MB data",
    "params": [
      "days"
    ]
  },
  "cf.recommendations.recording.create_dataframes": {
    "name": "cf.recommendations.recording.create_dataframes",
    "description": "Create dataframes to prepare trainable data.",
    "params": [
      "train_model_window",
      "job_type",
      "minimum_listens_threshold"
    ]
  },
  "cf.recommendations.recording.train_model": {
    "name": "cf.recommendations.recording.train_model",
    "description": "Train data to yield a model.",
    "params": ["ranks", "lambdas", "iterations", "alphas", "use_transformed_listencounts"]
  },
  "cf.recommendations.recording.recommendations": {
    "name": "cf.recommendations.recording.recommendations",
    "description": "Generate recommendations for all active ListenBrainz users.",
    "params": [
      "recommendation_raw_limit",
      "users"
    ]
  },
  "cf.recommendations.recording.discovery": {
    "name": "cf.recommendations.recording.discovery",
    "description": "Calculate the time for when the user played a recording the last time",
    "params": []
  },
  "import.artist_relation": {
    "name": "import.artist_relation",
    "description": "Import artist relation into the spark cluster.",
    "params": []
  },
  "import.musicbrainz_release_dump": {
    "name": "import.musicbrainz_release_dump",
    "description": "Import musicbrainz release json dump into the spark cluster.",
    "params": []
  },
  "similarity.similar_users": {
    "name": "similarity.similar_users",
    "description": "Generate similar user correlation",
    "params": [
      "max_num_users"
    ]
  },
  "similarity.recording.mlhd": {
    "name": "similarity.recording.mlhd",
    "description": "Generate recording similarity from MLHD",
    "params": [
      "session",
      "contribution",
      "threshold",
      "limit",
      "skip"
    ]
  },
  "similarity.recording": {
    "name": "similarity.recording",
    "description": "Generate recording similarity",
    "params": [
      "days",
      "session",
      "contribution",
      "threshold",
      "limit",
      "skip",
      "is_production_dataset"
    ]
  },
  "similarity.artist": {
    "name": "similarity.artist",
    "description": "Generate artist similarity",
    "params": [
      "days",
      "session",
      "contribution",
      "threshold",
      "limit",
      "skip",
      "is_production_dataset"
    ]
  },
  "year_in_music.similar_users": {
    "name": "year_in_music.similar_users",
    "description": "Generate similar user correlation for Year in Music",
    "params": ["year"]
  },
  "year_in_music.listens_per_day": {
    "name": "year_in_music.listens_per_day",
    "description": "Calculate the listens per day for the current year for each user",
    "params": ["year"]
  },
  "year_in_music.listen_count": {
    "name": "year_in_music.listen_count",
    "description": "Calculate the total listen count for the given year for each user",
    "params": ["year"]
  },
  "year_in_music.listening_time": {
    "name": "year_in_music.listening_time",
    "description": "Calculate the total duration of the listens for the given year for each user",
    "params": ["year"]
  },
  "year_in_music.new_artists_discovered_count": {
    "name": "year_in_music.new_artists_discovered_count",
    "description": "Calculate the number of artists the user listened to in the given year",
    "params": ["year"]
  },
  "year_in_music.top_genres": {
    "name": "year_in_music.top_genres",
    "description": "Calculate the top genres the user listened to in the given year",
    "params": ["year"]
  },
  "year_in_music.top_discoveries": {
    "name": "year_in_music.top_discoveries",
    "description": "Calculate the top discoveries playlists the given year",
    "params": ["year"]
  },
  "year_in_music.top_missed_recordings": {
    "name": "year_in_music.top_missed_recordings",
    "description": "Calculate the top missed recordings playlists the given year",
    "params": ["year"]
  },
  "year_in_music.top_stats": {
    "name": "year_in_music.top_stats",
    "description": "Calculate the top artists/recordings/releases stats for the current year for each user",
    "params": ["year"]
  },
  "year_in_music.artist_map": {
    "name": "year_in_music.artist_map",
    "description": "Calculate the top artist map stats for the current year for each user",
    "params": ["year"]
  },
  "releases.fresh": {
    "name": "releases.fresh",
    "description": "Calculate the intersection of fresh releases and user's listening history",
    "params": ["days", "database", "threshold"]
  },
  "troi.playlists": {
    "name": "troi.playlists",
    "description": "Generate troi playlists for all users",
    "params": ["slug", "users"]
  },
  "tags.default": {
    "name": "tags.default",
    "description": "Generate the tags dataset with percent rank",
    "params": []
  },
  "mlhd.popularity.all": {
    "name": "mlhd.popularity.all",
    "description": "Calculate all popularity data from mlhd.",
    "params": []
  }
}