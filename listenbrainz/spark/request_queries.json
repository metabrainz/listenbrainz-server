{
  "stats.user.entity": {
    "name": "stats.user.entity",
    "description": "Entity statistics for all users for the requested stats_range",
    "params": ["entity", "stats_range"]
  },
  "stats.user.listening_activity": {
    "name": "stats.user.listening_activity",
    "description": "Calculates number of listens in periods depending on the stats_range value. see the documentation in spark code for details.",
    "params": ["stats_range"]
  },
  "stats.user.daily_activity": {
    "name": "stats.user.daily_activity",
    "description": "Calculate number of listens for an user per hour on each day of the requested stats_range.",
    "params": ["stats_range"]
  },
  "stats.sitewide.entity": {
    "name": "stats.sitewide.entity",
    "description": "Calculate top entites listened to on the website in the requested stats_range",
    "params": ["entity", "stats_range"]
  },
  "stats.new_releases_of_top_artists": {
    "name": "stats.new_releases_of_top_artists",
    "description": "List of releases released in 2021 by top 50 artists of 2021 for the user",
    "params": []
  },
  "stats.most_prominent_color": {
    "name": "stats.most_prominent_color",
    "description": "Most prominent color of users",
    "params": []
  },
  "import.dump.full_newest": {
    "name": "import.dump.full_newest",
    "description": "Import the newest available full dump into the spark cluster",
    "params": []
  },
  "import.dump.full_id": {
    "name": "import.dump.full_id",
    "description": "Import full dump with the specified ID into the spark cluster",
    "params": ["dump_id"]
  },
  "import.dump.incremental_newest": {
    "name": "import.dump.incremental_newest",
    "description": "Import the newest available incremental dump into the spark cluster",
    "params": []
  },
  "import.dump.incremental_id": {
    "name": "import.dump.incremental_id",
    "description": "Import incremental dump with the specified ID into the spark cluster",
    "params": ["dump_id"]
  },
  "cf.recommendations.recording.create_dataframes": {
    "name": "cf.recommendations.recording.create_dataframes",
    "description": "Create dataframes to prepare trainable data.",
    "params": [
      "train_model_window",
      "job_type",
      "minimum_listens_threshold"
    ]
  },
  "cf.recommendations.recording.train_model": {
    "name": "cf.recommendations.recording.train_model",
    "description": "Train data to yield a model.",
    "params": ["ranks", "lambdas", "iterations", "alpha"]
  },
  "cf.recommendations.recording.candidate_sets": {
    "name": "cf.recommendations.recording.candidate_sets",
    "description": "Create candidate sets to generate recommendations",
    "params": [
      "recommendation_generation_window",
      "top_artist_limit",
      "similar_artist_limit",
      "users",
      "html_flag"
    ]
  },
  "cf.recommendations.recording.recommendations": {
    "name": "cf.recommendations.recording.recommendations",
    "description": "Generate recommendations for all active ListenBrainz users.",
    "params": [
      "recommendation_top_artist_limit",
      "recommendation_similar_artist_limit",
      "users"
    ]
  },
  "import.artist_relation": {
    "name": "import.artist_relation",
    "description": "Import artist relation into the spark cluster.",
    "params": []
  },
  "import.musicbrainz_release_dump": {
    "name": "import.musicbrainz_release_dump",
    "description": "Import musicbrainz release json dump into the spark cluster.",
    "params": []
  },
  "similarity.similar_users": {
    "name": "similarity.similar_users",
    "description": "Generate similar user correlation",
    "params": [
      "max_num_users"
    ]
  }
}
